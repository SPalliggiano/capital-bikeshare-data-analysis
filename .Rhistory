library("tidyverse")
library("here")
library("lubridate")
library("janitor")
file_paths <- list.files(path = here("data", "data_rides"), full.names = TRUE)
rides_raw <- tibble() # empty tibble
for (path in file_paths) {
rides_new <- read_csv(path)
# Binding the rows together will throw an error because the column "Start station number"
# (which exists in some of the files) is sometimes parsed as <double> and sometimes parsed
# as character. To make sure that the rows can be glued together, we must ensure that it is
# always coerced to <double> which is what the following code if-statement does.
if ("Start station number" %in% colnames(rides_new)) { # if the column "Start station number" exists
# Ensures that the column "Start station number" is <double> and not <character>.
rides_new <- rides_new %>%
mutate(`Start station number` = as.double(`Start station number`))
}
# Now we can bind the tables together by row.
rides_raw <- bind_rows(rides_raw, rides_new)
}
rides_clean <- rides_raw %>%  select(!c("Start station number","End station number","Bike number","ride_id","rideable_type", "start_station_id", "end_station_id","is_equity")) %>%
clean_names() %>%
mutate(start_station_name = coalesce(start_station,start_station_name)) %>%
mutate(end_station_name = coalesce(end_station, end_station_name)) %>%
mutate(member_casual = coalesce(member_type, member_casual)) %>%
mutate(started_at = coalesce(start_date, started_at)) %>%
mutate(ended_at = coalesce(end_date, ended_at)) %>%
mutate(duration = as.duration(ended_at - started_at)) %>%
select(!c("start_date","end_date","start_station","end_station","member_type")) %>%
mutate(member_casual = parse_factor(member_casual)) %>%
mutate(member_casual = fct_recode(member_casual,
casual = "Casual",
member = "Member" )) %>%
filter(duration > 60 & duration < (60*60*24)) #as described on website, potential false starts
library("tidyverse")
library("here")
library("lubridate")
library("janitor")
p4_a <- rides_clean %>% group_by(start_station_name) %>%
count(sort = TRUE) %>%
ungroup() %>%
slice_head(n = 10) %>%
ggplot(mapping = aes(y = reorder(start_station_name, n), x = n)) +
geom_bar(stat = "identity", fill = "green") +
scale_x_continuous(breaks = seq(from = 0, to = 80000, length = 9), labels = scales::comma)
p4_a <- rides_clean %>% group_by(start_station_name) %>%
count(sort = TRUE) %>%
ungroup() %>%
slice_head(n = 10) %>%
ggplot(mapping = aes(y = reorder(start_station_name, n), x = n)) +
geom_bar(stat = "identity", fill = "green") +
scale_x_continuous(breaks = seq(from = 0, to = 80000, length = 9), labels = scales::comma)
library("tidyverse")
library("here")
library("lubridate")
library("janitor")
file_paths <- list.files(path = here("data", "data_rides"), full.names = TRUE)
rides_raw <- tibble() # empty tibble
for (path in file_paths) {
rides_new <- read_csv(path)
# Binding the rows together will throw an error because the column "Start station number"
# (which exists in some of the files) is sometimes parsed as <double> and sometimes parsed
# as character. To make sure that the rows can be glued together, we must ensure that it is
# always coerced to <double> which is what the following code if-statement does.
if ("Start station number" %in% colnames(rides_new)) { # if the column "Start station number" exists
# Ensures that the column "Start station number" is <double> and not <character>.
rides_new <- rides_new %>%
mutate(`Start station number` = as.double(`Start station number`))
}
# Now we can bind the tables together by row.
rides_raw <- bind_rows(rides_raw, rides_new)
}
here()
View(rides_raw)
file_paths <- list.files(path = here("data", "data_rides"), full.names = TRUE)
rides_raw <- tibble() # empty tibble
for (path in file_paths) {
rides_new <- read_csv(path)
# Binding the rows together will throw an error because the column "Start station number"
# (which exists in some of the files) is sometimes parsed as <double> and sometimes parsed
# as character. To make sure that the rows can be glued together, we must ensure that it is
# always coerced to <double> which is what the following code if-statement does.
if ("Start station number" %in% colnames(rides_new)) { # if the column "Start station number" exists
# Ensures that the column "Start station number" is <double> and not <character>.
rides_new <- rides_new %>%
mutate(`Start station number` = as.double(`Start station number`))
}
# Now we can bind the tables together by row.
rides_raw <- bind_rows(rides_raw, rides_new)
}
rides_clean_4 <- rides_clean %>% filter(duration < (60 * 60 * 4))
rides_clean <- rides_raw %>%  select(!c("Start station number","End station number","Bike number","ride_id","rideable_type", "start_station_id", "end_station_id","is_equity")) %>%
clean_names() %>%
mutate(start_station_name = coalesce(start_station,start_station_name)) %>%
mutate(end_station_name = coalesce(end_station, end_station_name)) %>%
mutate(member_casual = coalesce(member_type, member_casual)) %>%
mutate(started_at = coalesce(start_date, started_at)) %>%
mutate(ended_at = coalesce(end_date, ended_at)) %>%
mutate(duration = as.duration(ended_at - started_at)) %>%
select(!c("start_date","end_date","start_station","end_station","member_type")) %>%
mutate(member_casual = parse_factor(member_casual)) %>%
mutate(member_casual = fct_recode(member_casual,
casual = "Casual",
member = "Member" )) %>%
filter(duration > 60 & duration < (60*60*24)) #potential false starts and abandoned bikes
rides_clean_4 <- rides_clean %>% filter(duration < (60 * 60 * 4))
p1 <- ggplot(data = rides_clean_4, mapping = aes(x = duration/60)) +
geom_histogram(data = transform(rides_clean, member_casual = NULL),
alpha = 0.3,
binwidth = 5) +
geom_histogram(mapping = aes(fill = member_casual),
colour = "black",
binwidth = 5) +
facet_wrap(facets = vars(member_casual)) +
scale_x_continuous(limits = c(0, 150)) +
scale_y_continuous(labels = scales::comma)
p1 + labs(
x = "Duration in minutes",
y = "Number of rides",
fill = "Member or casual?",
title = "Histogram of number of rides vs ride duration, by user type"
) +
geom_vline(xintercept = 30,
alpha = 0.5,
linetype = "dashed") +
annotate(
geom      = "curve",
x         = 75,
y         = 875000,
xend      = 30,
yend      = 750000,
curvature = 0,
arrow     = arrow(length = unit(1.5, "mm")),
alpha     = 0.8,
colour    = "#619F14"
) +
annotate(
geom = "text",
x          = 75,
y          = 875000,
label      = "Rides longer than 30 min \nincur $2 extra fee",
hjust      = 0.1, vjust = -0.1,
lineheight = 0.8,
size = 3,
colour     = "#619F14"
) + theme(
plot.title = element_text(size = rel(1.5))
)
p2 <- ggplot(data = rides_clean_4, mapping = aes(x = floor_date(started_at, unit = "month"))) +
geom_bar(aes(fill = member_casual)) +
scale_x_datetime(date_labels = "%b %Y") +
scale_y_continuous(labels = scales::comma)
p2 + labs(
x = "Month and year of ride",
y = "Number of rides",
fill = "Member or casual?",
title = "Number of rides vs time of the year, by type of user"
) +
theme(
plot.title = element_text(size = rel(1.5))
)
rides_clean_latlng <- rides_clean %>% filter(!is.na(start_lat)) %>%
filter(duration < 60 * 60) %>%
mutate(lat_diff = end_lat - start_lat) %>%
mutate(lng_diff = end_lng - start_lng)
p3 <- ggplot(data = rides_clean_latlng, mapping = aes(x = lat_diff, y = lng_diff)) +
geom_point(aes(colour = duration / 60)) +
scale_color_continuous(limits = c(0,60)) +
scale_color_gradient(low = "green", high = "red") +
scale_x_continuous(breaks = seq(from = -0.20, to = 0.20, by = 0.05)) +
scale_y_continuous(breaks = seq(from = -0.20, to = 0.20, by = 0.05)) +
coord_fixed(ratio = 1)
p3 + labs(
x = "Difference in latitude",
y = "Difference in longitude",
colour = "Ride duration",
title = "Lat/lng difference by ride duration"
) + theme(
plot.title = element_text(
size = rel(1.5),
hjust = 0
),
panel.grid.minor = element_blank()
)
p4_a <- rides_clean %>% group_by(start_station_name) %>%
count(sort = TRUE) %>%
ungroup() %>%
slice_head(n = 10) %>%
ggplot(mapping = aes(y = reorder(start_station_name, n), x = n)) +
geom_bar(stat = "identity", fill = "green") +
scale_x_continuous(breaks = seq(from = 0, to = 80000, length = 9), labels = scales::comma)
p4_a +
labs(
x = "Number of rides",
y = "Start station name",
title = "Most popular start stations"
) +
theme(
panel.grid.major.y = element_blank(),
panel.background = element_blank(),
panel.ontop = TRUE,
plot.title = element_text(size = rel(1.5)),
axis.text.y = element_text(hjust = 0,
size = 8,
margin = margin(l = 10)),
plot.margin = margin(0,15,0,0)
)
p4_b <- rides_clean %>% group_by(end_station_name) %>%
count(sort = TRUE) %>%
ungroup() %>%
slice_head(n = 10) %>%
ggplot(mapping = aes(y = reorder(end_station_name, n), x = n)) +
geom_bar(stat = "identity", fill = "purple") +
scale_x_continuous(breaks = seq(from = 0, to = 80000, length = 9), labels = scales::comma)
p4_b +
labs(
x = "Number of rides",
y = "End station name",
title = "Most popular end stations"
) +
theme(
panel.grid.major.y = element_blank(),
panel.background = element_blank(),
panel.ontop = TRUE,
plot.title = element_text(size = rel(1.5)),
axis.text.y = element_text(hjust = 0,
size = 8,
margin = margin(l = 10)),
plot.margin = margin(0,15,0,0)
)
View(rides_clean)
p4_a <- rides_clean %>% group_by(start_station_name) %>%
count(sort = TRUE) %>%
ungroup() %>%
slice_head(n = 10) %>%
ggplot(mapping = aes(y = reorder(start_station_name, n), x = n)) +
geom_bar(stat = "identity", fill = "green") +
scale_x_continuous(breaks = seq(from = 0, to = 80000, length = 9), labels = scales::comma)
library("tidyverse")
library("here")
library("lubridate")
library("janitor")
file_paths <- list.files(path = here("data", "data_rides"), full.names = TRUE)
rides_raw <- tibble() # empty tibble
for (path in file_paths) {
rides_new <- read_csv(path)
# Binding the rows together will throw an error because the column "Start station number"
# (which exists in some of the files) is sometimes parsed as <double> and sometimes parsed
# as character. To make sure that the rows can be glued together, we must ensure that it is
# always coerced to <double> which is what the following code if-statement does.
if ("Start station number" %in% colnames(rides_new)) { # if the column "Start station number" exists
# Ensures that the column "Start station number" is <double> and not <character>.
rides_new <- rides_new %>%
mutate(`Start station number` = as.double(`Start station number`))
}
# Now we can bind the tables together by row.
rides_raw <- bind_rows(rides_raw, rides_new)
}
rides_clean <- rides_raw %>%  select(!c("Start station number","End station number","Bike number","ride_id","rideable_type", "start_station_id", "end_station_id","is_equity")) %>%
clean_names() %>%
mutate(start_station_name = coalesce(start_station,start_station_name)) %>%
mutate(end_station_name = coalesce(end_station, end_station_name)) %>%
mutate(member_casual = coalesce(member_type, member_casual)) %>%
mutate(started_at = coalesce(start_date, started_at)) %>%
mutate(ended_at = coalesce(end_date, ended_at)) %>%
mutate(duration = as.duration(ended_at - started_at)) %>%
select(!c("start_date","end_date","start_station","end_station","member_type")) %>%
mutate(member_casual = parse_factor(member_casual)) %>%
mutate(member_casual = fct_recode(member_casual,
casual = "Casual",
member = "Member" )) %>%
filter(duration > 60 & duration < (60*60*24)) #potential false starts and abandoned bikes
p1 <- ggplot(data = rides_clean %>% filter(duration < (60 * 60 * 4)), mapping = aes(x = duration/60)) +
geom_histogram(data = transform(rides_clean, member_casual = NULL),
alpha = 0.3,
binwidth = 5) +
geom_histogram(mapping = aes(fill = member_casual),
colour = "black",
binwidth = 5) +
facet_wrap(facets = vars(member_casual)) +
scale_x_continuous(limits = c(0, 150)) +
scale_y_continuous(labels = scales::comma)
p1 + labs(
x = "Duration in minutes",
y = "Number of rides",
fill = "Member or casual?",
title = "Histogram of number of rides vs ride duration, by user type"
) +
geom_vline(xintercept = 30,
alpha = 0.5,
linetype = "dashed") +
annotate(
geom      = "curve",
x         = 75,
y         = 875000,
xend      = 30,
yend      = 750000,
curvature = 0,
arrow     = arrow(length = unit(1.5, "mm")),
alpha     = 0.8,
colour    = "#619F14"
) +
annotate(
geom = "text",
x          = 75,
y          = 875000,
label      = "Rides longer than 30 min \nincur $2 extra fee",
hjust      = 0.1, vjust = -0.1,
lineheight = 0.8,
size = 3,
colour     = "#619F14"
) + theme(
plot.title = element_text(size = rel(1.5))
)
p2 <- ggplot(data = rides_clean %>% filter(duration < (60 * 60 * 4)), mapping = aes(x = floor_date(started_at, unit = "month"))) +
geom_bar(aes(fill = member_casual)) +
scale_x_datetime(date_labels = "%b %Y") +
scale_y_continuous(labels = scales::comma)
p2 + labs(
x = "Month and year of ride",
y = "Number of rides",
fill = "Member or casual?",
title = "Number of rides vs time of the year, by type of user"
) +
theme(
plot.title = element_text(size = rel(1.5))
)
rides_clean_latlng <- rides_clean %>% filter(!is.na(start_lat)) %>%
filter(duration < 60 * 60) %>%
mutate(lat_diff = end_lat - start_lat) %>%
mutate(lng_diff = end_lng - start_lng)
p3 <- ggplot(data = rides_clean_latlng, mapping = aes(x = lat_diff, y = lng_diff)) +
geom_point(aes(colour = duration / 60)) +
scale_color_continuous(limits = c(0,60)) +
scale_color_gradient(low = "green", high = "red") +
scale_x_continuous(breaks = seq(from = -0.20, to = 0.20, by = 0.05)) +
scale_y_continuous(breaks = seq(from = -0.20, to = 0.20, by = 0.05)) +
coord_fixed(ratio = 1)
p3 + labs(
x = "Difference in latitude",
y = "Difference in longitude",
colour = "Ride duration",
title = "Lat/lng difference by ride duration"
) + theme(
plot.title = element_text(
size = rel(1.5),
hjust = 0
),
panel.grid.minor = element_blank()
)
p4_a <- rides_clean %>% group_by(start_station_name) %>%
count(sort = TRUE) %>%
ungroup() %>%
slice_head(n = 10) %>%
ggplot(mapping = aes(y = reorder(start_station_name, n), x = n)) +
geom_bar(stat = "identity", fill = "green") +
scale_x_continuous(breaks = seq(from = 0, to = 80000, length = 9), labels = scales::comma)
p4_a +
labs(
x = "Number of rides",
y = "Start station name",
title = "Most popular start stations"
) +
theme(
panel.grid.major.y = element_blank(),
panel.background = element_blank(),
panel.ontop = TRUE,
plot.title = element_text(size = rel(1.5)),
axis.text.y = element_text(hjust = 0,
size = 8,
margin = margin(l = 10)),
plot.margin = margin(0,15,0,0)
)
p4_b <- rides_clean %>% group_by(end_station_name) %>%
count(sort = TRUE) %>%
ungroup() %>%
slice_head(n = 10) %>%
ggplot(mapping = aes(y = reorder(end_station_name, n), x = n)) +
geom_bar(stat = "identity", fill = "purple") +
scale_x_continuous(breaks = seq(from = 0, to = 80000, length = 9), labels = scales::comma)
p4_b +
labs(
x = "Number of rides",
y = "End station name",
title = "Most popular end stations"
) +
theme(
panel.grid.major.y = element_blank(),
panel.background = element_blank(),
panel.ontop = TRUE,
plot.title = element_text(size = rel(1.5)),
axis.text.y = element_text(hjust = 0,
size = 8,
margin = margin(l = 10)),
plot.margin = margin(0,15,0,0)
)
View(rides_clean)
View(rides_clean_latlng)
View(rides_clean)
p5 <- rides_clean %>% mutate(duration_class = case_when(
(duration/60) < 10 ~ "0-10 minutes",
(duration/60) < 20 ~ "10-20 minutes",
(duration/60) < 30 ~ "20-30 minutes",
(duration/60) >=30 ~ ">30 minutes")
) %>% ggplot(mapping = aes(x = hour(started_at))) +
geom_bar(mapping = aes(fill = reorder(duration_class, -duration)), position="dodge") +
scale_x_continuous(breaks = 0:23) +
scale_y_continuous(labels = scales::comma)
p5 + labs(
x = "Time of day (hours)",
y = "Number of rides",
fill = "Duration of rides",
title = "Number of rides vs time of day, by duration"
) + theme(
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
plot.title = element_text(hjust = 0.5,
size = rel(1.5))
)
p1 <- ggplot(data = rides_clean %>% filter(duration < (60 * 60 * 4)), mapping = aes(x = duration/60)) +
geom_histogram(data = transform(rides_clean, member_casual = NULL),
alpha = 0.3,
binwidth = 5) +
geom_histogram(mapping = aes(fill = member_casual),
colour = "black",
binwidth = 5) +
facet_wrap(facets = vars(member_casual)) +
scale_x_continuous(limits = c(0, 150),
breaks = seq(from = 0, to = 150, by = 25)) +
scale_y_continuous(labels = scales::comma)
p1 + labs(
x = "Duration in minutes",
y = "Number of rides",
fill = "Member or casual?",
title = "Histogram of number of rides vs ride duration, by user type"
) +
geom_vline(xintercept = 30,
alpha = 0.5,
linetype = "dashed") +
annotate(
geom      = "curve",
x         = 75,
y         = 875000,
xend      = 30,
yend      = 750000,
curvature = 0,
arrow     = arrow(length = unit(1.5, "mm")),
alpha     = 0.8,
colour    = "#619F14"
) +
annotate(
geom = "text",
x          = 75,
y          = 875000,
label      = "Rides longer than 30 min \nincur $2 extra fee",
hjust      = 0.1, vjust = -0.1,
lineheight = 0.8,
size = 3,
colour     = "#619F14"
) + theme(
plot.title = element_text(size = rel(1.5)),
panel.grid.minor.y = element_blank()
)
p1 <- ggplot(data = rides_clean %>% filter(duration < (60 * 60 * 4)), mapping = aes(x = duration/60)) +
geom_histogram(data = transform(rides_clean, member_casual = NULL),
alpha = 0.3,
binwidth = 5) +
geom_histogram(mapping = aes(fill = member_casual),
colour = "black",
binwidth = 5) +
facet_wrap(facets = vars(member_casual)) +
scale_x_continuous(limits = c(0, 150),
breaks = seq(from = 0, to = 150, by = 25)) +
scale_y_continuous(labels = scales::comma)
p1 + labs(
x = "Duration in minutes",
y = "Number of rides",
fill = "Member or casual?",
title = "Histogram of number of rides vs ride duration, by user type"
) +
geom_vline(xintercept = 30,
alpha = 0.5,
linetype = "dashed") +
annotate(
geom      = "curve",
x         = 75,
y         = 875000,
xend      = 30,
yend      = 750000,
curvature = 0,
arrow     = arrow(length = unit(1.5, "mm")),
alpha     = 0.8,
colour    = "#619F14"
) +
annotate(
geom = "text",
x          = 75,
y          = 875000,
label      = "Rides longer than 30 min \nincur $2 extra fee",
hjust      = 0.1, vjust = -0.1,
lineheight = 0.8,
size = 3,
colour     = "#619F14"
) + theme(
plot.title = element_text(size = rel(1.5)),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()
)
library("tidyverse")
library("here")
library("lubridate")
library("janitor")
